{
    "feeds": [],
    "scripts": [],
    "code": "const params = ViewParameters.get();\n\nconst leadDataUrl = \"/services/ts/codbex-lead-customer-ext/api/GenerateCustomerOpportunityService.ts/leadData/\" + params.id;\nconst dropdownDataUrl = \"/services/ts/codbex-lead-customer-ext/api/GenerateCustomerOpportunityService.ts/dropdownData\";\nconst opportunityUrl = \"/services/ts/codbex-lead-customer-ext/api/GenerateCustomerOpportunityService.ts/opportunityFromLead\";\n\n$http.get(leadDataUrl)\n    .then(response => {\n        $scope.leadData = response.data;\n    })\n    .catch(function (error) {\n        console.error(\"Error fetching Lead data: \", error.data);\n    });\n\n$http.get(dropdownDataUrl)\n    .then(response => {\n        $scope.dropdownData = response.data;\n    })\n    .catch(function (error) {\n        console.error(\"Error fetching Dropdown data: \", error.data);\n    });\n\n$scope.convertOpportunity = () => {\n    const customerBody = {\n        CompanyName: $scope.leadData.Company,\n        Email: $scope.leadData.Email,\n        Phone: $scope.leadData.Phone,\n        Country: $scope.leadData.Country,\n        Citry: $scope.leadData.City\n    }\n\n    console.log(\"Customer body: \", customerBody);\n\n    const customerContactBody = {\n        Name: $scope.leadData.Name,\n        Designation: $scope.leadData.Designation,\n        Email: $scope.leadData.Email,\n        Phone: $scope.leadData.Phone\n    }\n\n    console.log(\"Customer COntact Bodu: \", customerContactBody);\n\n    let opportunityBody = {\n        Amount: $scope.model.amount,\n        Lead: $scope.leadData.Id,\n        Owner: $scope.leadData.Owner,\n        Currency: $scope.model.amount\n    }\n\n    console.log(\"Opportunity Body: \", opportunityBody);\n\n    if($scope.model.type && $scope.model.type != ''){\n        opportunityBody[\"Type\"] = $scope.model.type;\n    }\n\n    console.log(\"Opportunity Body after type: \", opportunityBody);\n\n    if($scope.model.priority && $scope.model.priority != ''){\n        opportunityBody[\"Priority\"] = $scope.model.priority;\n    }\n\n    console.log(\"Opportunity Body after priority: \", opportunityBody);\n\n    if($scope.model.probability && $scope.model.probability != ''){\n        opportunityBody[\"Probability\"] = $scope.model.probability;\n    }\n\n    console.log(\"Opportunity Body after probability: \", opportunityBody);\n\n    const requestBody = {\n        CustomerBody: customerBody,\n        CustomerContactBody: customerContactBody,\n        OpportunityBody: opportunityBody\n    }\n\n    console.log(\"Request Body: \", requestBody);\n\n    $http.post(opportunityUrl, requestBody)\n        .catch(function (error) {\n            console.error(\"Error fetching Lead data: \", error.data);\n        });\n\n    $scope.closeDialog();\n}\n\n$scope.closeDialog = () => {\n    $scope.showDialog = false;\n    messageHub.closeDialogWindow(\"opportunity-generate\");\n};",
    "form": [
        {
            "controlId": "header",
            "groupId": "fb-display",
            "title": "Convert Lead to Opportunity",
            "size": 3
        },
        {
            "controlId": "input-number",
            "groupId": "fb-controls",
            "id": "amount",
            "label": "Amount",
            "horizontal": false,
            "isCompact": false,
            "placeholder": "Opportunity Amount...",
            "model": "amount",
            "required": true,
            "minNum": 0,
            "maxNum": 100000000000,
            "step": 1
        },
        {
            "controlId": "input-select",
            "groupId": "fb-controls",
            "id": "currency",
            "label": "Currency",
            "horizontal": false,
            "isCompact": false,
            "staticData": false,
            "model": "currency",
            "options": "dropdownData.Currencies",
            "optionLabel": "Code",
            "optionValue": "Id",
            "required": true
        },
        {
            "controlId": "input-select",
            "groupId": "fb-controls",
            "id": "type",
            "label": "Type",
            "horizontal": false,
            "isCompact": false,
            "staticData": false,
            "model": "type",
            "options": "dropdownData.OpportunityTypes",
            "optionLabel": "Name",
            "optionValue": "Id",
            "required": false
        },
        {
            "controlId": "input-select",
            "groupId": "fb-controls",
            "id": "priority",
            "label": "Priority",
            "horizontal": false,
            "isCompact": false,
            "staticData": false,
            "model": "priority",
            "options": "dropdownData.OpportunityPriorities",
            "optionLabel": "Name",
            "optionValue": "Id",
            "required": false
        },
        {
            "controlId": "input-select",
            "groupId": "fb-controls",
            "id": "propability",
            "label": "Propability",
            "horizontal": false,
            "isCompact": false,
            "staticData": false,
            "model": "probability",
            "options": "dropdownData.OpportunityProbabilities",
            "optionLabel": "Name",
            "optionValue": "Id",
            "required": false
        },
        {
            "controlId": "container-vbox",
            "groupId": "fb-containers",
            "children": []
        },
        {
            "controlId": "container-hbox",
            "groupId": "fb-containers",
            "children": [
                {
                    "controlId": "button",
                    "groupId": "fb-controls",
                    "label": "Convert",
                    "type": "positive",
                    "sizeToText": false,
                    "isSubmit": true,
                    "isCompact": false,
                    "callback": "convertOpportunity()"
                },
                {
                    "controlId": "button",
                    "groupId": "fb-controls",
                    "label": "Cancel",
                    "type": "negative",
                    "sizeToText": false,
                    "isSubmit": false,
                    "isCompact": false,
                    "callback": "closeDialog()"
                }
            ]
        }
    ]
}